COMPLEMENT_DICT = {'A': 'T', 'C': 'G', 'T': 'A', 'G': 'C'}
SYMBOL_NUMBER = {'A': 0, 'C': 1, 'G': 2, 'T': 3}
NUMBER_SYMBOL = ['A', 'C', 'G', 'T']

input_text = "TTTTCCAGATTTATTGAAACCTGTCCAAGGTTTTCCATTTTCCATCCAAGGTTTTCCAGAAACCTGGAAACCTGTTTTCCAGATTTATTTCCAAGGTTTTCCATTTTCCATCCAAGGTCCAAGGGATTTATTGATTTATTGAAACCTGTTTTCCAGATTTATTTCCAAGGGATTTATTGCACGCGGTCCAAGGGCACGCGGGATTTATTTTTTCCAGCACGCGGGATTTATTTTTTCCATTTTCCATCCAAGGGCACGCGGTCCAAGGTCCAAGGGCACGCGGGCACGCGGGAAACCTGTTTTCCAGATTTATTTTTTCCAGCACGCGGGATTTATTGAAACCTGTTTTCCATTTTCCAGCACGCGGGAAACCTGTTTTCCATCCAAGGGCACGCGGGATTTATTTCCAAGGTTTTCCATCCAAGGTCCAAGGTCCAAGGTTTTCCAGAAACCTGTCCAAGGTTTTCCAGCACGCGGGCACGCGGGCACGCGGGCACGCGGGATTTATTGAAACCTGGATTTATTGCACGCGGTTTTCCAGATTTATTGATTTATTGAAACCTGTCCAAGGGATTTATTGATTTATTTTTTCCAGCACGCGGTCCAAGGGCACGCGGTCCAAGGTTTTCCATTTTCCAGATTTATTTCCAAGGTCCAAGGGAAACCTGGATTTATTTCCAAGGGAAACCTGGAAACCTGGATTTATTGCACGCGGGCACGCGGTCCAAGGTTTTCCATCCAAGGGATTTATTTCCAAGGGAAACCTGTCCAAGGGCACGCGGTTTTCCATCCAAGGTTTTCCATTTTCCA"
input_pattern = "CTCGCTTCT"
input_genome = "CTCGCTTCTCGCTTGCAAACACTCGCTTAGCTCGCTTCTCGCTTCTGCCTCGCTTTTTCTCGCTTGCTCGCTTGCTCGCTTTGTCTCTCGCTTACCTTCCTCGCTTCTCGCTTCTCGCTTTCTCGCTTACTTATGCAGCTCGCTTTTTCTAAATGAGCTCGCTTCTCGCTTTCGAATTCCTCTCGCTTCTCGCTTTCTCGCTTCTCGCTTAATATGTCTCGCTTTACTCGCTTCTCGCTTCTTGATCTCGCTTGAGGGTCTCGCTTCTCGCTTACTGCTCGCTTTATCTCGCTTTAACTCGCTTCTCGCTTCTCGCTTCCTCGCTTCTCTCGCTTCTCGCTTACGGGCTCGCTTAGCGCTCGCTTCCGACTCGCTTCCTCGCTTTGTTCCTCGCTTGTATGTCGCTCGCTTAGCTCGCTTAGTTGCGCTCGCTTCTCGCTTTTGCTCGCTTAGACTCCTCGCTTAGGGGTAGTAACTCGCTTACCTCGCTTACTTCATCCTCGCTTCGCTCGCTTGAACACACCCTCGCTTATGTAGCTCGCTTCCACTCGCTTCTCGCTTCTCGCTTGCTCTCGCTTCTCGCTTAACTCGCTTATGCCTCGCTTCACTCGCTTACCTCGCTTCCCTCGCTTCTCGCTTCTCGCTTCTCGCTTTCTCGCTTCTCGCTTTAATATTCTCGCTTGTATGAAGACTCGCTTCTCGCTTCTCGCTTACCTCGCTTCTCGCTTGGCGAACATCCTCGCTTTACTACTCGCTTCAACTCGCTTCTCGCTTTGTGCTCGCTTCTCGCTTTCTCGCTTGATTCTCTCGCTTTATTGCCTCGCTTTCTCGCTTGGCGAGCAAGCGCTCGCTTCTCTCGCTTCTCGCTTCTCGCTTCCCTCGCTTCCTCGCTTAGCCTCGCTTCTCGCTTTCTCGCTTGTACTCGCTTGCTCGCTTTCTCGCTTGCTCGCTTCAGGAAGTCTCGCTTCCTCGCTTCAACTCGCTTTTACCTCGCTTTGAGGGCTCGCTTTCGCTCGCTTGGCCTCGCTTCTCGCTTCTCGCTTGTTCCTCGCTTTAGCCTCGCTTGGTTGCTCGCTTCTCGCTTCCCTCGCTTAGCTCGCTTCTATCTCGCTTCTCGCTTCTCGCTTTTTACCTCGCTTATCTCGCTTGAGAACTCGCTTCTCGCTTCTCGCTTTTTGTGCCTCGCTTCCTCGCTTTCTCGCTTCTCGCTTCTCGCTTCTCGCTTTCTCGCTTTGATCCCTCATTTGACTCGCTTCTCGCTTCGGCCCATACAGACGAGTCTTAGTAGCCTCGCTTTCTCGCTTCTCGCTTCTCGCTTATCTCTCGCTTTTCTCGCTTTCCTCGCTTAGTCCAATCACCCTCGCTTGACTCGCTTTTTCTCGCTTAATTCCCTTAAACTCGCTTAACTCGCTTCGTCCTCGCTTCCTCGCTTTCTCGCTTACTCGCTTAACTCGCTTACCTTCTCGCTTATTAGCTCGCTTCTAGCAGTGCTCGCTTCTCGCTTACACCCTCGCTTAGCTCGCTTGCTCGCTTCTCGCTTTGCTCGCTTTGCTCGCTTCTCGCTTTCCTCGCTTCTCGCTTTCTCGCTTCTCGCTTCTCGCTTCCAGTCAGTTAGCTCGCTCGCTTCTCGCTTCCTCGCTTGCTCGCTTCTCGCTTTATCTCGCTTTTTCTCGCTTAGAGCCTTAGAACCTCGCTTGCTCGCTTATAACTCGCTTCCTCGCTTCATCCTCGCTTTTCTCGCTTATCCGTCCTCGCTTCTCGCTTTTCTCGCTTTTGCTCGCTTTCTCGCTTATTACCTGCTCGCTTGACTAAAGCTCGCTTCTCGCTTCTCGCTTCTCGCTTAGACTGGCTCGCTTCTCGCTTCTCGCTTGCAATGCCTCGCTTGCTCGCTTCTCGCTTCTCGCTTCCTTGTACTCGCTTCTCGCTTAGCCTCGCTTCCTACGGTCTCGCTTCTCGCTTGCGCCTCTCGCTTCGCCTCGCTTAAGCTCGCTTCTCGCTTCTCGCTTCTCGCTTCTCGCTTGGTCTCGCTTTCCTCGCTTTGAACCTCGCTTCGCTCGCTTTCTCGCTTCTCGCTTCTCGCTTGCCCTCGCTTTCTTCGCTCGCTTCTCGCTTTGACTCGCTTGTCATTACAGCGCGGCCCTCGCTTTCTCGCTTTAACTCTCGCTTACTCGCTTAGCAGGAAGCTCGCTTCACCCTGCTCGCTTCTCGCTTAAGTTCTCTCGCTTCGCGTGGCTCGCTTCTCGCTTCTCGCTTACTCGCTTCTCGCTTCTCGCTTCTCGCTTCCCCTCGCTTCGTAAAAACTACTCGCTTCTATTCTCGCTTGGGACACGTGCTCGCTTCACTCGCTTAGACTCGCTTTTCTCGCTTACTCGCTTCCTCGCTTACAAAATTAACCGCTCGCTTGCTCGCTTCTCGCTTCTGAGTCGAGGGAGGTCTCGCTTCTCGCTTTAACGTCTCGCTTCCACTCGCTTCTCGCTTGTGACTCGCTTGAGACTCGCTTGCTCGCTTCTCGCTTATCTCGCTTACTCGCTTGTCTCCTCGCTTCTGTCCTCGCTTAGACTCGCTTCCTCGCTTCTCTCGCTTCTCCTACTCGCTTCTCGCTTCTCGCTTGTCTCGCTTACTCGCTTACTCGCTTACGCTCGCTTCTCGCTTTACCATTTCTCGCTTCTCTCTCGCTTAAATTCGACTCGCTTTCTCGCTTGCTCGCTTTACTCTCGCTTCTCGCTTCTCGCTTCCTCGCTTAACCTCGCTTCCCTCGCTTCTCGCTTCTCGCTTAGGGTGGCTCGCTTTGCGTCGGGTTCCCCTCGCTTCGCCTCGCTTGCTCTCGCTTCAGCTCGCTTCTCGCTTTCTCGCTTTCTCGCTTTCCTCGCTTCTCGCTTATACGCCTCGCTTTACTTGCCTCGCTTCTCGCTTCTACTCGCTTTCTCGCTTCTACAGGGTGTCCTCGCTTTCTTCCTCGCTTCTCGCTTCACTCGCTTCCCCTCGCTTGAGGTATTCTCGCTTTCTCGCTTACTCGCTTCACTCGCTTTCACGGCTACTCGCTTAACTCGCTTCCCTTTCACTCGCTTCTCGCTTCTCGCTTGCTGCCTCGCTTTTTCTCGCTTGCTCGCTTTTTGCTCGCTTTACCCTCGCTTACTCGCTTTCTCGCTTCTCGCTTGGCTCGCTTACTCGCTTTCTCGCTTTGGTCTCGCTTCTCGCTTGACTCGCTTGCTCGCTTCTCGCTTAGCTCGCTTTCAGGCTCGCTTACCTCGCTTGGCCCTCGCTTTCCTCGCTTCTCGCTTCTCGCTTCTCGCTTTCTCGCTTAATCTCTCGCTTACCTCGCTTCTCGCTTCCAGGGACTCGCTTCTCGCTTCCGTCTCGCTTCACTCGCTTACTCGCTTCTCGCTTCTCGCTTGGGTCCGGTACCAGTATACTCGCTTACTCGCTTACTCGCTTCCTCGCTTCTCGCTTAGCTCGCTTTCTCGCTTCATGCTTGATATAGTACTCGCTTCTCGCTTACTCGCTTCTCGCTTCCTTCCTTGCTCGCTTCCTGGTCTCGCTTACTCGCTTCTCGCTTGCTCGCTTTATCCGCTCTCGCTTGACTCGCTTTCTCTCGCTTCTCGCTTCGCTCGCTTGTAGTACGCTCGCTTGCTCGCTTACCTCGCTTCACCTCGCTTCCCTCGCTTACTCGCTTCTCGCTTCCTCGCTTACTCGCTTCTCGCTTGATCTCGCTTACCCATATGGCTCGCTTCTCGCTTATTACCGACTCGCTTCTTCGCCCTCGCTTACTCGCTTACTCGCTTACCTCGCTTCTCGCTTGGACAAACCTCGCTTCGTGCCCTCGCTTCTAGGAGCCCTCGCTTGAACCGCGCGCGCCTCGCTTCCGCTCGCTTCTCGCTTAGTAAGTCCTCGCTTGCTCGCTTATTACTCGCTTTCTCGCTTCTCGCTTGGCTCGCTTACTCGCTTCTCGCTTCGCTCGCTTCTCGCTTTCCAGCGTACGACTCGCTTAGTTATCTCGCTTTGCTCGCTTTACGTAGCGCAGGTGTCCAACTCGCTTCTCGCTTCCACTCGCTTTCAAGCAGCCTCGCTTTGCAGCTCGCTTCTCGCTTTTGCCTCGCTTTTCCTCGCTTTCTCGCTTGAATCTCGCTTAATGCCTGGGCACCTCGCTTCGCTCGCTTCTCGCTTTAGACTCGCTTCTCGCTTCCTCGCTTCTCGCTTTGTTATCTCGCTTGTCTCGCTTCTCCCTCGCTTTATCTCGCTTGTTACTCGCTTCTCGCTTGTTACTCGCTTTCTCGCTTCAGCACTCGCTTCTCGCTTAGTTTGCTCGCTTAGCGCTCGCTTCCCCCTCCCTCGCTTACTCGCTTTTACTCGCTTTTTACTCGCTTCTTCTCGCTTACTCGCTTGACCGCTCGCTTCCTCGCTTCTCGCTTGCCGCCTTCTCGCTTCTCGCTTCCGCCTCGCTTCAGTGATGCTCGCTTGCTCGCTTTACTCGCTTGCGCCTCGCTTGTGTAAACTCGCTTAACTCGCTTCGCTCGCTTCTGAAGCTCGCTTGAGCTCGCTTCGTACTCGCTTCTCGCTTGGTAGCTCGCTTCCTCGCTTCTCGCTTCCTCGCTTTCTCGCTTGACTCGCTTTCCAACTCGCTTCGATCAACTCGCTTCCTCGCTTTATGGGCTCGCTTCCTCGCTTGGCTCGCTTTCCTCGCTTGTGACTCGCTTTACTCGCTTTCTCGCTTCTCGCTTACCTCGCTTCTCGCTTTAGCTCGCTTCTGCCAGCTCGCTTACCTGGTACACTCGCTTGACTCTCGCTTCTCGCTTGCTCGCTTCGCTCGCTTGCTAGGACCCTCGCTTCGATTAAGAATACGACTCGCTTGATCTCGCTTTCCTCGCTTCTCGCTTATAAGCCTCGCTTGATGTATCTCGCTTATACTCGCTTCTCGCTTGTCCCCCACTCGCTTGGCTTGCTCGCTTGCGGCTCGCTTGAATGGTCCTCGCTTCCTCGCTTTTGTACTCGCTTTAACTCGCTTCCCTCGCTTGCTCGCTTGCTCGCTTACTCGCTTTCTCGCTTCTCTCGCTTAATAGCTCGCTTAGTCGGAGCTCGCTTGGTCTCGCTTCTCGCTTTCTCGCTTCTCGCTTGTCTCGCTTATCCCTCGCTTAACTCGCTTCTCGCTTCTCGCTTACCTCGCTTCTCGCTTACACTCGCTTCAGCCTCGCTTTTACTCGCTTCTCGCTTGACATCTCGCTTCTCGCTTATAACTCGCTTCCGTCTCGCTTGCTCGCTTACTCGCTTGTCCTCGCTTCTCGCTTCAAAGCCTCTCGCTTCTCGCTTCTCGCTTGCCTCGCTTCTCGCTTGCTCGCTTTGAAGCGCTCGCTTGATCTACTCTCGCTTCTCGCTTCTATCAGCCTCGCTTTACTCGCTTAGCTCGCTTATGCACTCGCTTATACTCGCTTACTCGCTTCTCGCTTCGCTCGCTTGGACCTCGCTTTCTCGCTTACATCTCGCTTCTCGCTTTCCCTCGCTTCTCGCTTACTCGCTTCAGGCTCGCTTCTCGCTTCTCGCTTCTATTACTCGCTTGCCTCGCTTCCTCGCTTCGCTCGCTTCACTCTCGCTTACGTGGGCTCGCTTACTCGCTTTCAGATCGGAAGCGCACTCGCTTAAGCGCTCGCTTGCTCGCTTTCTCGCTTCTCGCTTACTCGCTTGGCTCGCTTCTCGCTTCACTCGCTTGGAGTTCGAGCTCTCGCTTTTGCTCGCTTCTCGCTTACTCGCTTAGTCCTCGCTTACGTGCACCGGGACTCGCTTTACACCTCGCTTACTCGCTTGCTCGCTTACTCGCTTGCTCGCTTCTTTCTCGCTTTTTCTCGCTTTCCTCGCTTGTCGCTCGCTTTAGTCCCTCGCTTCCTCGCTTCTCGCTTCTCGCTTAGTACTTCTCGCTTGCTCGCTTTGATAGCTCGCTTCCTCGCTTCTCGCTTGAGTCTCGCTTCGTAGACCGCTCGCTTCGTAAGTCCACTCGCTTGTTCTCGCTTCTCGCTTCCTCGCTTCATCTCGCTTCTCGCTTCTCGCTTCCGGCTCGCTTCTCGCTTCCCTCGCTTCTCGCTTCAATACTCGCTTCTCGCTTATGACTCGCTTCTCGCTTCTCAACTCGCTTAGGCCCTCCTCGCTTTAAGACTCGCTTACCCTCGCTTCAAGACTCTCGCTTCTCGCTTCGTTTCCCTCGCTTTTTCTCGCTTCTCGCTTCTCGCTTCGCCTCGCTTACTCGCTTACTCGCTTTCTCGCTTCTCGCTTGTCTCGCTTCCTCGCTTCTCGCTTCTCGCTTCCCCTCGCTTCTCGCTTGACCTCGCTTGGGCCGTGCGCTCGCTTCTCGCTTGACTCGCTTCTCGCTTGCCTCGCTTACTCGCTTGGAGTCAAGGCCTCGCTTACTCGCTTGCGAGACTCGCTTACTCGCTTCAAGCATCTCGCTTTCCTCTCGCTTGCCTCGCTTACCTCGCTTCTCGCTTTACTCGCTTGCCCTCTCGCTTTGCGGCTTTGGTCCACGGCCTCGCTTCTCGCTTTTGCTCGCTTTCTCGCTTCCATCCTCGCTTACTCGCTTCAATCCCCTCGCTTGGCCTTAACTCGCTTTCACAACTCGCTTCCTCTCGCTTATCTCGCTTTTCTCGCTTGAAACTCGCTTAAGCTCGCTTGGTGAAGCCTGCTCGCTTGCTCGCTTCCTCGCTTCTCGCTTTTAGCTCGCTTGCCGAGTGCTCGCTTGAATTCTCGCTTTTGCAAGCCTCGCTTTTACTCGCTTTTACTCGCTTTCTCGCTTCCTCGCTTCTCTCGCTTGCAGACCTCGCTTCTCGCTTTGATGCTCGCTTCCGTCTCGCTTATCTCAACCAGAGTGAGATCCTTCTCGCTTCTCGCTTCTCGCTTCTCGCTTCGCTCGCTTCTCGCTTGCTCGCTTACTCGCTTGCTCGCTTCTCGCTTCTCGCTTCTCGCTTGTACAACTCGCTTTAGCCCTCGCTTTCTCGCTTACGGTAGAAGACTCGCTTGAGTGGGTACTCGCTTACTCTCGCTTGCTCGCTTTGCCTCGCTTATCTCGCTTCTCGCTTTGCGGTACTCCCACTAATCTCGCTTTCTCGCTTTCCCTCGCTTCTCGCTTTCTCGCTTCCTCGCTTTCTCGCTTGAAAGACTCGCTTCTCGCTTAGCTCGCTTCAGCTCGCTTGCTGCTCGCTTCGACTCCTCGCTTGCTCGCTTATCCCTCTCGCTTATCTCGCTTACTCGCTTCTCGCTTTCCTCTCGCTTACTCGCTTGCCTCTCGCTTTGCTCGCTTGGACCTCGCTTCTCGCTTACTCGCTTTCTCGCTTGACTCGCTTGGCTCGCTTGAGCTCGCTTCTCTGTCTCGCTTTCCTCGCTTCCCTCGCTTTGACATCTCGCTTGCCGGCTCGCTTACTCGCTTGGGACGCAACTCGCTTGGCCTCGCTTCTCTCGCTTTCTCGCTTCTCGCTTTTCCAGCGTTCAAAGCAATATACTCGCTTAGATGGCTCGCTTCCAAGACTCGCTTTGTGACGCCCTCGCTTCGGACCCTCGCTTTCTCGCTTCTCGCTTCACCTCGCTTCTCGCTTCTCGCTTTGCTCGCTTCCTCGCTTAAGCTCGCTTCCTCGCTTGCTCGCTTCGACTCGCTTCTCGCTTAATCTCGCTTCTCGCTTCTCGCTTCTCGCTTCTCGCTTCTTAGCTCGCTTCTCGCTTCCTCGCTTCTCGCTTCTCGCTTCTGTGCTCGCTTGTAGAACTCGCTTACTCGCTTCCATGAAATCTCTCGCTTTCTCGCTTGCTCGCTTGCTCGCTTCTCGCTTTCTCGCTTGCTCGCTTATCTCGCTTCTCGCTTTGCACTCGCTTCTCGCTTCTCGCTTCTCGCTTAACGCTCGCTTCTGTCTCGCTTCCCTCGCTTTCTCGCTTGGTCTCGCTTCTCGCTTCTCGCTTAGGGAGGCTCGCTTCTCGCTTCTCGCTTCCTCGCTTATATATTGGAATACTCGCTTCCTCGCTTGGCTCGCTTCCCTCGCTTCTGCTCGCTTGCGCACACCTCGCTTGCTCGCTTGCCCTCGCTTGACGACCTCGCTTCTCGCTTCTCGCTTCTCGCTTTGACTCGCTTTGACTCGCTTAACCTCGCTTTCCTTGTATCACTCGCTTGCCCGAGGCTCGCTTGTATCCTCGCTTCCTCGCTTCAACCTCGCTTAACGTATACCTCGCTTCCTCGCTTACTCGCTTACCTCGCTTCTCGCTTCTCGCTT"
input_k = 13
'''
PatternCount(Text, Pattern)
        count ← 0
        for i ← 0 to |Text| − |Pattern|
            if Text(i, |Pattern|) = Pattern
                count ← count + 1
        return count
'''
def PatternCount(text, pattern):
    start = 0
    count = 0

    while start < len(text):
        pos = text.find(pattern, start)

        if pos != -1:
            start = pos + 1
            count += 1
        else:
            break
    
    return count

"""
    FrequentWords(Text, k)
        FrequentPatterns ← an empty set
        for i ← 0 to |Text| − k
            Pattern ← the k-mer Text(i, k)
            Count(i) ← PatternCount(Text, Pattern)
        maxCount ← maximum value in array Count
        for i ← 0 to |Text| − k
            if Count(i) = maxCount
                add Text(i, k) to FrequentPatterns
        remove duplicates from FrequentPatterns
        return FrequentPatterns
"""

def FrequentWords(text, k):
    frequent_patterns = set()
    count = []
    max_count = 0
    start = 0
    while start < len(text) - k:
        pattern = text[start:(start + k)]
        #print(pattern)
        count.insert(start, PatternCount(text, pattern))
        start+=1
    #print(count)
    max_count = max(count)
    #print(max_count)
    start = 0
    while start < len(text) - k:
        if count[start] == max_count:
            frequent_patterns.add(text[start:(start + k)])
        start+=1

    return frequent_patterns

def complement(pattern):
    bases = [COMPLEMENT_DICT[base] for base in pattern]

    return ''.join(bases)

def reverse_compliment(pattern):
    return complement(pattern[::-1])

def PatternMatching(pattern, genome):
    start = 0
    indices = []

    while start < len(genome):
        pos = genome.find(pattern, start)

        if pos != -1:
            indices.append(pos)
            start = pos + 1
        else:
            break
    
    return indices

"""
    ComputingFrequencies(Text, k)
        for i ← 0 to 4^k − 1
            FrequencyArray(i) ← 0
        for i ← 0 to |Text| − k
            Pattern ← Text(i, k)
            j ← PatternToNumber(Pattern)
            FrequencyArray(j) ← FrequencyArray(j) + 1
        return FrequencyArray
"""
def ComputingFrequencies(Text, k):
    frequency_arr = [0] * (( 4 ** k ))
    #print(len(frequency_arr))
    
    for i in range(len(Text) - (k - 1)):
        pattern = Text[i:(i + k)]
        #print(pattern)
        j = PatternToNumber(pattern)
        frequency_arr[j] = frequency_arr[j] + 1

    return frequency_arr


def PatternToNumber(Pattern):
    if len(Pattern) == 0:
        return 0
    
    return 4 * PatternToNumber(Pattern[:-1]) + SymbolToNumber(Pattern[-1:])

def SymbolToNumber(Symbol):
    return SYMBOL_NUMBER[Symbol]

def NumberToPattern(index, k):
    if k == 1:
        return NUMBER_SYMBOL[index]
    
    prefix_ind = index // 4
    r = index % 4

    symbol = NUMBER_SYMBOL[r]

    prefix_pattern = NumberToPattern(prefix_ind, k - 1)

    return prefix_pattern + symbol
    
def faster_frequent_words(text, k):
    frequent_patterns = set()
    freq_array = ComputingFrequencies(text, k)
    max_count = max(freq_array)

    for i in range(4 ** k):
        if freq_array[i] == max_count:
            pattern = NumberToPattern(i, k)
            frequent_patterns.add(pattern)

    return frequent_patterns

'''
BetterClumpFinding(Genome, k, t, L)
    FrequentPatterns ← an empty set
    for i ← 0 to 4k − 1
        Clump(i) ← 0
    Text ← Genome(0, L)
    FrequencyArray ← ComputingFrequencies(Text, k)
    for i ← 0 to 4k − 1
        if FrequencyArray(i) ≥ t
            Clump(i) ← 1
    for i ← 1 to |Genome| − L
        FirstPattern ← Genome(i − 1, k)
        index ← PatternToNumber(FirstPattern)
        FrequencyArray(index) ← FrequencyArray(index) − 1
        LastPattern ← Genome(i + L − k, k)
        index ← PatternToNumber(LastPattern)
        FrequencyArray(index) ← FrequencyArray(index) + 1
        if FrequencyArray(index) ≥ t
            Clump(index) ← 1
    for i ← 0 to 4k − 1
        if Clump(i) = 1
            Pattern ← NumberToPattern(i, k)
            add Pattern to the set FrequentPatterns
    return FrequentPatterns
'''
def BetterClumpFinding(Genome, k, L, t):
    freq_patterns = set()
    clump = [0] * (( 4 ** k ))

    text = Genome[0:L]
    print(text)

    freq_array = ComputingFrequencies(text, k)
    print(freq_array)

    for i in range(4 ** k):
        if freq_array[i] >= t:
            clump[i] = 1
    
    for i in range(1, (len(Genome) - L) + 1):
        print(i)
        first_pattern = Genome[i - 1:(i-1) + k]
        index = PatternToNumber(first_pattern)
        freq_array[index] = freq_array[index] - 1

        last_pattern = Genome[i + L - k:i + L]
        index = PatternToNumber(last_pattern)
        freq_array[index] = freq_array[index] + 1

        if freq_array[index] >= t:
            clump[index] = 1
    for i in range(4 ** k):
        print(clump[i])
        if clump[i] == 1:
            pattern = NumberToPattern(i,k)
            freq_patterns.add(pattern)

    return freq_patterns


def main():
    #print(PatternCount('ACTGTACGATGATGTGTGTCAAAG', 'TGT'))
    #print(FrequentWords('TAAACGTGAGAGAAACGTGCTGATTACACTTGTTCGTGTGGTAT', 3))
    #print(reverse_compliment('CCAGATC'))
    print(PatternMatching('CGC', 'ATGACTTCGCTGTTACGCGC'))
    #print(PatternToNumber('CGCTACAATTGTTACATGG'))
    #print(NumberToPattern(5615, 10))
    #print(' '.join([str(val) for val in ComputingFrequencies('GATGGCCAGCTAATACTGCACGTACCTCCTGCTAGATTGAGGGTCGCAAGGTACAAAAAAGCATGGTGGCGACTGTGAGCCACGAAATTCTGCTTTGCACTACCGAGTTCGCGTCGGGAACGTCTCCAGGTTAAGATTATCGACGGTGGCTCACAGTACTCCCACTGTCGAGGAACGTCTTGGGCAGTGGCTTGATATATGAACAGGAGGTCGGTATGATCCCCTCTGGCGGCCTACTGTTGGTACGATCCGCCTGTCCTGAACGCGATAGACGTCGATATGCGAACGAAGGCAAGATCCCTTACGAATAAAGCGGTGCCGGATCTGTCGTTGAGCAGCTATTCTATGGACCACCGCTACTGTGATCTGTTGAGGGCTGGTTCAATCATCAGCTCTTCAAGGCTAGTATAACTGCTGAATGGGAATTGCGCGGACGTGTAAATAAACCGGCTCATACGGTAATTGCATGGTCCTGGCTGTATCGGCAGATCATTGCAGAAGCAGATACCGCAGGGTGTTACAACCCACATTGTCTCTACTCGTACTGCCAAAGTGTCTGTAAATCGTAACCACCGCTACCAATGGTGAATTCAGTCAATTGCAGGGGACTTTCATTCATTAAAATGCTTCTAGTATACATCTCCCCCGTCATACTACTCATCTTGAAGATC', 7)]))
    #print(faster_frequent_words('CGGAAGCGAGATTCGCGTGGCGTGATTCCGGCGGGCGTGGAGAAGCGAGATTCATTCAAGCCGGGAGGCGTGGCGTGGCGTGGCGTGCGGATTCAAGCCGGCGGGCGTGATTCGAGCGGCGGATTCGAGATTCCGGGCGTGCGGGCGTGAAGCGCGTGGAGGAGGCGTGGCGTGCGGGAGGAGAAGCGAGAAGCCGGATTCAAGCAAGCATTCCGGCGGGAGATTCGCGTGGAGGCGTGGAGGCGTGGAGGCGTGCGGCGGGAGATTCAAGCCGGATTCGCGTGGAGAAGCGAGAAGCGCGTGCGGAAGCGAGGAGGAGAAGCATTCGCGTGATTCCGGGAGATTCAAGCATTCGCGTGCGGCGGGAGATTCAAGCGAGGAGGCGTGAAGCAAGCAAGCAAGCGCGTGGCGTGCGGCGGGAGAAGCAAGCGCGTGATTCGAGCGGGCGTGCGGAAGCGAGCGG', 12))
    #print(BetterClumpFinding('AAAGGATCAGCTCTCTGGTAAGTGGTCTAGTATACCTCTTTCGGTCTCCGGTTTAATACCCTGCCCCTTATGTTCATGCACACCGGCTTAGACGGAGGTACGATTCTTTCGAACTCACCCGCGGATCTGCTATGGTAGGCGTAACGTGTGTGTGTAACGTGTGTATTGACATACGTATCTTTACTACTCCCCGGTCCACCGCAGACTGGCCATCTTTAATCACAGCATAGACGTGGCCAGAGGGATGGAAGAAATGGCTCGGTCTCCTCCGTAATCCGTAATCTCCGTAATAACGATCTTGACGGGGCTCATATAATCGGAACTCTTGTTTATGAAACGACAACTCGTGGATTTGGTTTTCGATTCGGCAATATCACCTACACATGCGCCGATGCTCTACACGAATACCCCCCAAACCTTAATAAGATCGCCCCTTGCCCCAACAACGTGAGTGCATCAGGTTTGCGCTAGAGACACACGGAATCAGAACTTAGACAGGCCTTGATTGGACAATTTGATCTGGTGATAACGGAAGCTAGGCCGGGATACTCAATAGATCCCTGTGGTTTGCACTTGTTTGCACGGACGTGAGAGACGTGAGAGAGAAGATTTGACTGCTACCGCATGCTAGGCGGAAATTGTCCTGCCGTCTCCTGTCCTGCCGTTGGATGGCGAGGCATCAACGACGGACGGTCAACGACGGACACTCAGAGGCTCACATACGGCGGTCACATCACATACGGTTCTGTAGGACACACTATGACACTGGCAAGTCGTGACAGCACGATGGCAGTAACTTCTACGCGCCAGCGCCCCAGCACCAATTTTTTACACTTATCTAAGTACGATCTCAAAGTGAAAAATGGCAGCGATCTTGATATTTCGCAATTTAGAGAGAGTCCTATAACTAAGCATGGGCCGAGGCGCATCCGTGGTAGTGACCTAAAGCTACTCGTATCTGCCGCGGTTAAATTGGGAGGCCACAGGGTGCATCTGGTTCGTGACAAGTACGGTACGACGAAGTACGTAAGAGGATACGGCGCGGACTATCAAGGGATGGCATTAGATCAGAGAGTCGCTTAACCGGCGCTCTAATTTAAGCTCTAATTCTATGGAGCTTCTAGCGTGTTCCGTAAAACCTGATTGAGTGCCCTGGTTTTCGTCGCGAGTCCCGTTATCATTTATTACTACCACGGAGTTGGCTCCCGGACGTTGTCGGAGGATTGAAATCCTGGCTCCCATAACTGTAGAGTACTGTAGAGTGAGTGTTTTGCACGCTAGGGGGATTGGATTCCGTCGGGGGATTCCGTTCCCGCGTTGGAGTCCGAATAACCATTACGGCTAGTTTTCCCTATTCTTCTAACGATCCCCCCACTTCACCGATGACCATACAGCATGCTGTTGGCTGTTGGATTCTCTGTTGGATCGAGTAATCGGCCCAGTCGGCCCAGGCGGCCCAGGACCGGGTGACCAACAGACCCCTTAGGAGCACGTGCTCGTTAATTCTCTTCACCCGTGATTACGGTGGCCAAGAGGGAACTCTTGCCACATCGGCGGTCGGGTCTACTCAATTCGAGAGTCCAACCGTGGGTAGCTCCCCAGCCACGGGGGGCCGTACCTGTTAGAATGAACGGTAGGATCATAGGCCGCGCTCAGTTACGGGCTGGGCATTGCGCACGGCAGCCTTACAACTTAGGAGGTTTCGCTATCTTGCACCGGGTGTGATGCTGCGATGCTGCTCTTTTCTTCTTTTACATGAAAAACCGGCAGAACCGTCGCATCTCCAAAGCCTCCAAAGCCTCCAAAGCCTCCAAAGCCTCCAAAGCCTCCAAAGCCTCCAAAGCCTCCAAAGC', 9, 24, 4))

if __name__ == '__main__':
    main()
